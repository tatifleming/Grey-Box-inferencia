# Carregar bibliotecas

# só podemos comparar as técnicas se otimizar os hiperparâmetros
# otimização é feita com herística (cercar um ótimo)
# na regressão logística, o corte é análogo ao hiperparâmetro
# na regressão linear, temos as regularizações (l1 e l2)
# o C do SVM é uma penalização (é chamado de regularização da regressão)

# Importação de TODAS as bibliotecas que serão utilizadas

# Gerais
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Scikit-Learn

# Conjunto Treino/Teste
from sklearn.model_selection import train_test_split

# Normalização (MinMax e Z-Score)
from sklearn.preprocessing import StandardScaler

# Transformação de dados categóricos para numéricos
from sklearn.preprocessing import LabelEncoder

# Técnica (KNN para Classificação e Regressão)
from sklearn.neighbors import KNeighborsClassifier, KNeighborsRegressor

# Técnica (Árvore de Decisão para Classificação e Regressão)
from sklearn.tree import DecisionTreeClassifier, DecisionTreeRegressor

# Técnicas (Regressão Linear e Regressão Logística)
from sklearn.linear_model import LinearRegression, LogisticRegression

# Técnicas (SVM para Classificação e Regressão)
from sklearn.svm import SVC, SVR

# Otimização dos hiperparâmetros
from sklearn.model_selection import RandomizedSearchCV

# Métricas para Classificação - Matriz de Confusão, Acurácia, Precisão, Recall e F1-Score
from sklearn.metrics import confusion_matrix, classification_report
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score 

# Métricas para Regressão - R2, MAE e MSE/RMSE
from sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error

# Importar 'DummyClassifier' e 'DummyRegressor' do componente 'dummy' do sklearn
from sklearn.dummy import DummyClassifier, DummyRegressor
